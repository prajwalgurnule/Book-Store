import axios from "axios";
import { motion } from "framer-motion";
import { useState, useEffect } from "react";
import { FaArrowRight, FaArrowLeft, FaHeart, FaRegHeart, FaBookmark, FaRegBookmark, FaEye, FaStar } from "react-icons/fa";
import noCover from "../images/NoImage.svg";

export default function FeaturedBooks({ toggleFavorite, toggleSaved, favorites, saved }) {
  const featuredCategories = ["Best Sellers", "New Releases", "Award Winners"];
  const [activeCategory, setActiveCategory] = useState(0);
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [quickViewBook, setQuickViewBook] = useState(null);
  const [isQuickViewOpen, setIsQuickViewOpen] = useState(false);

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        setLoading(true);
        setError(null);
        const res = await axios.get(
          `https://www.googleapis.com/books/v1/volumes?q=${featuredCategories[activeCategory]}&maxResults=8&key=AIzaSyDaLzmtMXyLkRnXJzGuxjkRfYJGYpmrqFM`
        );
        setBooks(res.data.items || []);
      } catch (err) {
        console.error("Error fetching books:", err);
        setError("Failed to load books. Please try again later.");
        setBooks([]);
      } finally {
        setLoading(false);
      }
    };
    
    fetchBooks();
  }, [activeCategory]);

  const nextCategory = () => {
    setActiveCategory((prev) => (prev + 1) % featuredCategories.length);
  };

  const prevCategory = () => {
    setActiveCategory((prev) => (prev - 1 + featuredCategories.length) % featuredCategories.length);
  };

  const openQuickView = (book) => {
    setQuickViewBook(book);
    setIsQuickViewOpen(true);
    document.body.style.overflow = 'hidden';
  };

  const closeQuickView = () => {
    setIsQuickViewOpen(false);
    document.body.style.overflow = 'auto';
  };

  // Animation variants
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.3 }
    }
  };

  const quickViewVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <section className="py-16 bg-gray-50">
      <div className="container mx-auto px-4">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-12"
        >
          <h2 className="text-4xl font-bold text-gray-800 mb-4">
            <span className="text-indigo-600">Featured</span> Books
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Discover curated collections of must-read titles across various genres.
          </p>
        </motion.div>

        <div className="flex justify-center items-center mb-8">
          <button 
            onClick={prevCategory}
            className="p-2 rounded-full bg-white shadow-md mr-4 hover:bg-gray-100 transition"
            disabled={loading}
          >
            <FaArrowLeft className="text-indigo-600" />
          </button>
          <div className="flex space-x-2">
            {featuredCategories.map((category, index) => (
              <button
                key={index}
                onClick={() => setActiveCategory(index)}
                disabled={loading}
                className={`px-4 py-2 rounded-full ${
                  activeCategory === index 
                    ? 'bg-indigo-600 text-white' 
                    : 'bg-white text-gray-700'
                } shadow-sm transition min-w-[120px]`}
              >
                {category}
              </button>
            ))}
          </div>
          <button 
            onClick={nextCategory}
            className="p-2 rounded-full bg-white shadow-md ml-4 hover:bg-gray-100 transition"
            disabled={loading}
          >
            <FaArrowRight className="text-indigo-600" />
          </button>
        </div>

        {/* Loading State */}
        {loading && (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-600"></div>
          </div>
        )}

        {/* Error State */}
        {error && !loading && (
          <div className="text-center py-12 text-red-500">
            {error}
            <button 
              onClick={() => window.location.reload()}
              className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
            >
              Retry
            </button>
          </div>
        )}

        {/* Books Grid */}
        {!loading && !error && (
          <motion.div 
            initial="hidden"
            animate="visible"
            className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8"
          >
            {books.map((book) => {
              const { volumeInfo, id } = book;
              const isFavorite = favorites.includes(id);
              const isSaved = saved.includes(id);

              return (
                <motion.div
                  key={id}
                  variants={cardVariants}
                  className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow relative"
                >
                  {/* Book Cover */}
                  <div className="relative aspect-[2/3] w-full">
                    <img
                      alt={volumeInfo.title || "Book cover"}
                      src={volumeInfo.imageLinks?.thumbnail || volumeInfo.imageLinks?.smallThumbnail || noCover}
                      className="h-full w-full object-cover"
                    />
                    {/* Quick View Button */}
                    <button
                      onClick={() => openQuickView(book)}
                      className="absolute bottom-2 left-2 p-2 bg-white rounded-full shadow-md hover:bg-indigo-100 transition-colors"
                      aria-label="Quick view"
                    >
                      <FaEye className="text-indigo-600" />
                    </button>
                  </div>

                  {/* Favorite & Save Buttons */}
                  <div className="absolute top-3 right-3 flex space-x-2">
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleFavorite(id);
                      }}
                      className="p-2 bg-white rounded-full shadow-md hover:bg-red-100 transition-colors"
                      aria-label={isFavorite ? "Remove from favorites" : "Add to favorites"}
                    >
                      {isFavorite ? (
                        <FaHeart className="text-red-500" />
                      ) : (
                        <FaRegHeart className="text-gray-600" />
                      )}
                    </button>
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleSaved(id);
                      }}
                      className="p-2 bg-white rounded-full shadow-md hover:bg-indigo-100 transition-colors"
                      aria-label={isSaved ? "Remove from saved" : "Save for later"}
                    >
                      {isSaved ? (
                        <FaBookmark className="text-indigo-600" />
                      ) : (
                        <FaRegBookmark className="text-gray-600" />
                      )}
                    </button>
                  </div>

                  {/* Book Info */}
                  <div className="p-4">
                    {/* Categories */}
                    {volumeInfo.categories?.length > 0 && (
                      <div className="mb-2">
                        <span className="inline-block px-2 py-1 text-xs font-medium bg-indigo-100 text-indigo-800 rounded-full">
                          {volumeInfo.categories[0]}
                        </span>
                      </div>
                    )}

                    {/* Title */}
                    <h3 className="text-lg font-bold text-gray-900 line-clamp-2">
                      {volumeInfo.title || "Untitled"}
                    </h3>

                    {/* Author */}
                    {volumeInfo.authors?.length > 0 && (
                      <p className="mt-1 text-sm text-gray-600 line-clamp-1">
                        by {volumeInfo.authors.join(", ")}
                      </p>
                    )}

                    {/* Rating */}
                    <div className="flex items-center mt-2">
                      <div className="flex text-yellow-400">
                        {[...Array(5)].map((_, i) => (
                          <FaStar
                            key={i}
                            className={`${i < Math.floor(volumeInfo.averageRating || 0) ? 'text-yellow-400' : 'text-gray-300'}`}
                          />
                        ))}
                      </div>
                      <span className="text-xs text-gray-500 ml-1">
                        ({volumeInfo.ratingsCount || 0})
                      </span>
                    </div>

                    {/* Published Date */}
                    {volumeInfo.publishedDate && (
                      <p className="mt-2 text-xs text-gray-500">
                        {new Date(volumeInfo.publishedDate).getFullYear() || "N/A"}
                      </p>
                    )}
                  </div>
                </motion.div>
              );
            })}
          </motion.div>
        )}

        {/* Empty State */}
        {!loading && !error && books.length === 0 && (
          <div className="text-center py-12 text-gray-500">
            No books found in this category.
          </div>
        )}

        {/* Quick View Modal */}
        {isQuickViewOpen && quickViewBook && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <motion.div
              initial="hidden"
              animate="visible"
              variants={quickViewVariants}
              className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
            >
              <div className="p-6">
                <div className="flex flex-col md:flex-row gap-6">
                  {/* Book Cover */}
                  <div className="w-full md:w-1/3">
                    <img
                      src={quickViewBook.volumeInfo.imageLinks?.thumbnail || 
                           quickViewBook.volumeInfo.imageLinks?.smallThumbnail || 
                           noCover}
                      alt={quickViewBook.volumeInfo.title || "Book cover"}
                      className="w-full h-auto rounded-lg shadow-md"
                    />
                  </div>

                  {/* Book Details */}
                  <div className="w-full md:w-2/3">
                    <div className="flex justify-between items-start">
                      <div>
                        <h2 className="text-2xl font-bold text-gray-900">
                          {quickViewBook.volumeInfo.title || "Untitled"}
                        </h2>
                        <p className="text-gray-600 mt-1">
                          by {quickViewBook.volumeInfo.authors?.join(", ") || "Unknown Author"}
                        </p>
                      </div>
                      <button
                        onClick={closeQuickView}
                        className="text-gray-500 hover:text-gray-700"
                      >
                        ✕
                      </button>
                    </div>

                    {/* Rating */}
                    <div className="flex items-center mt-3">
                      <div className="flex text-yellow-400">
                        {[...Array(5)].map((_, i) => (
                          <FaStar
                            key={i}
                            className={`${i < Math.floor(quickViewBook.volumeInfo.averageRating || 0) ? 'text-yellow-400' : 'text-gray-300'}`}
                          />
                        ))}
                      </div>
                      <span className="text-sm text-gray-500 ml-2">
                        {quickViewBook.volumeInfo.averageRating || 0} ({quickViewBook.volumeInfo.ratingsCount || 0} ratings)
                      </span>
                    </div>

                    {/* Categories */}
                    {quickViewBook.volumeInfo.categories?.length > 0 && (
                      <div className="mt-3 flex flex-wrap gap-2">
                        {quickViewBook.volumeInfo.categories.map((category, index) => (
                          <span
                            key={index}
                            className="px-2 py-1 text-xs font-medium bg-indigo-100 text-indigo-800 rounded-full"
                          >
                            {category}
                          </span>
                        ))}
                      </div>
                    )}

                    {/* Published Date */}
                    {quickViewBook.volumeInfo.publishedDate && (
                      <p className="mt-2 text-sm text-gray-500">
                        Published: {new Date(quickViewBook.volumeInfo.publishedDate).toLocaleDateString()}
                      </p>
                    )}

                    {/* Page Count */}
                    {quickViewBook.volumeInfo.pageCount && (
                      <p className="mt-1 text-sm text-gray-500">
                        Pages: {quickViewBook.volumeInfo.pageCount}
                      </p>
                    )}

                    {/* Description */}
                    {quickViewBook.volumeInfo.description && (
                      <div className="mt-4">
                        <h3 className="font-semibold text-gray-900">Description</h3>
                        <p className="mt-1 text-gray-600 text-sm">
                          {quickViewBook.volumeInfo.description}
                        </p>
                      </div>
                    )}

                    {/* Action Buttons */}
                    <div className="mt-6 flex space-x-4">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleFavorite(quickViewBook.id);
                        }}
                        className="flex items-center px-4 py-2 bg-white border border-red-500 rounded-lg hover:bg-red-50 transition-colors"
                      >
                        {favorites.includes(quickViewBook.id) ? (
                          <>
                            <FaHeart className="text-red-500 mr-2" />
                            Remove Favorite
                          </>
                        ) : (
                          <>
                            <FaRegHeart className="text-red-500 mr-2" />
                            Add to Favorites
                          </>
                        )}
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleSaved(quickViewBook.id);
                        }}
                        className="flex items-center px-4 py-2 bg-white border border-indigo-500 rounded-lg hover:bg-indigo-50 transition-colors"
                      >
                        {saved.includes(quickViewBook.id) ? (
                          <>
                            <FaBookmark className="text-indigo-500 mr-2" />
                            Remove from Saved
                          </>
                        ) : (
                          <>
                            <FaRegBookmark className="text-indigo-500 mr-2" />
                            Save for Later
                          </>
                        )}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </div>
    </section>
  );
}